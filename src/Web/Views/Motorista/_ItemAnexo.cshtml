@model Raizen.UniCad.Model.View.MotoristaDocumentoView

<style>
    .pop-hover{
        margin-top: 10px;
    }
</style>

<tr id="linha-@Model.GetHashCode()" class="gradeX">
    @using (Html.BeginCollectionItem("Motorista.Documentos"))
    {
        @Html.HiddenFor(p => p.ID)
        @Html.HiddenFor(p => p.IDTipoDocumento)
        @Html.HiddenFor(p => p.IDMotorista)
        @Html.HiddenFor(p => p.Sigla)
        @Html.HiddenFor(p => p.Obrigatorio)
        @Html.HiddenFor(p => p.Descricao)
        @Html.HiddenFor(p => p.Aprovar)
        @Html.HiddenFor(p => p.DocumentoPossuiVencimento)
        @Html.HiddenFor(model => model.Anexo, new { @id = "Anexo-" + Model.IDTipoDocumento })

        string operation = (this.ViewData.ContainsKey("Operacao") ? this.ViewData["Operacao"].ToString() : string.Empty) ;

        var data = "";
        var visualizar = "";
        var docData = "";

        if (operation == "Insert")
        {
            docData = "display:none;";
            data = "display:none";
        }
        else if (Model.VisualizarDoc)
        {
            data = "display:none";
            visualizar = "display:none";
        }
        else
        {
            docData = "display:none;";
        }

        <td style="word-wrap: break-word;">@Model.Sigla</td>
        <td style="word-wrap: break-word;">@Model.Descricao</td>
        <td style="word-wrap: break-word;@visualizar">@(Model.Obrigatorio ? "Sim" : "Não")</td>

        <td style="word-wrap: break-word;@docData @((Model.DataVencimento.HasValue && Model.DataVencimento.Value < DateTime.Now.Date) ? "color:red; font-weight:bold" : "")">@(Model.DataVencimento.HasValue ? Model.DataVencimento.Value.ToString("dd/MM/yyyy") : "")</td>
        <td style="word-wrap: break-word;@data">
            @{if (!Model.DocumentoPossuiVencimento || (!Model.Aprovar && !Model.DataVencimentoEditavel))
                {
                    @Html.HiddenFor(model => model.DataVencimento)
                    <div align="center" style="@((Model.DataVencimento.HasValue && Model.DataVencimento.Value < DateTime.Now.Date) ? "color:red; font-weight:bold" : "")">@(Model.DataVencimento.HasValue ? Model.DataVencimento.Value.ToString("dd/MM/yyyy") : "")</div>
                }
                else
                {
                    <div>@Html.BootstrapDateBoxFor(model => model.DataVencimento, (Model.DataVencimento.HasValue ? Model.DataVencimento.Value.ToString("dd/MM/yyyy") : null), new { @class = "dataValidade form-control", @onkeyup = "mascaraData(this);", @style = (Model.DataVencimento.HasValue && Model.DataVencimento.Value < DateTime.Now.Date) ? "border-color: red" : "" }, new HtmlHelperOption { colunas = "col-md-12", hideLabel = true }, null, true)</div>
                }
            }
        </td>


        <td style="word-wrap: break-word;">
            @if (string.IsNullOrEmpty(Model.Anexo))
            {
                if (!Model.VisualizarDoc)
                {
                    <input id="input-701-@Model.IDTipoDocumento" type="file" name="@Html.NameFor(p => p.Anexo)" class="anexoCount" style="@visualizar" data-buttonText="Selecione" data-iconName="glyphicon glyphicon-file">
                }
            }
            else
            {
                <button type="button" style="float: left; margin-right: 10px;@visualizar" tabindex="500;" id="limparAnexo-@Model.IDTipoDocumento" title="Limpar" class="btn btn-default fileinput-remove fileinput-remove-button" onclick="RemoverAnexo(@Model.IDTipoDocumento);"><i class="glyphicon glyphicon-trash"></i> </button>
                <a href="@Url.Action("Download","Arquivo")?file=@(Model.Anexo)" style="margin-top:10px" class="anexoCount" target="_blank" title="@Model.Anexo" id="linkAnexo-@Model.IDTipoDocumento">@Html.PopoverTextFor(model => model.Anexo, 50)</a>
                <div id="inputDiv-@Model.IDTipoDocumento" style="display:none">
                    <input id="input-701-@Model.IDTipoDocumento" type="file" name="@Html.NameFor(p => p.Anexo)" class="anexoCount" data-buttonText="Selecione" data-iconName="glyphicon glyphicon-file">
                </div>
            }
        </td>
    }
</tr>


<script>
    function RemoverAnexo(id) {
        $('#limparAnexo-'+id).hide();
        $('#linkAnexo-'+id).hide();
        $("#inputDiv-"+id).show(800);
    };

    $("#input-701-@Model.IDTipoDocumento").fileinput({
        uploadUrl: '@Url.Action("AnexarArquivo", "Arquivo")',
        dropZoneEnabled: false,
        showUpload: false,
        showPreview: false,
        browseLabel: '',
        uploadLabel: '',
        removeLabel: '',
        initialCaption: "Tamanho máximo: 20MB",
        layoutTemplates: {
            progress: ''
        },
    });

    $('#input-701-@Model.IDTipoDocumento').on('fileloaded', function (event, file, previewId, index, reader) {

        var formData = new FormData();

        formData.append('file', file);
        raizenCoreJs.raizenHelpers.AbrirLoading();
        $.ajax({
            url: '@Url.Action("AnexarArquivo", "Arquivo")',
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            type: 'POST',
            success: function (response) {
                raizenCoreJs.raizenHelpers.FecharLoading();

                if (response == 'O Arquivo selecionado está vazio!') {
                    $('#linha-' + @Model.GetHashCode() +' .glyphicon.glyphicon-trash').trigger('click')
                    ShowErrorMenssage(response);
                }
                else if (response == 'Tamanho Arquivo')
                {
                    ShowErrorMenssage('O arquivo deve ser menor que 20 MB, por favor, tente novamente', 20);
                    $('#linha-' + @Model.GetHashCode() +' .glyphicon.glyphicon-trash').trigger('click')
                }
                else if (response.indexOf('Formato de Arquivo Inválido') >= 0) {
                    ShowErrorMenssage(response, 20);
                    $('#linha-' + @Model.GetHashCode() +' .glyphicon.glyphicon-trash').trigger('click')
                }
                else {
                    $('#Anexo-@Model.IDTipoDocumento').val(response);
                }
            },
            error: function (response) {
                ShowErrorMenssage('O arquivo deve ser menor que 20 MB, por favor, tente novamente', 20);
                raizenCoreJs.raizenHelpers.FecharLoading();
            }
        });
    });

</script>