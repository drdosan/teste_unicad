@using Raizen.Framework.Models
@using Raizen.Framework.Web.MVC.Extensions
@using Raizen.Framework.Utils.Extensions
@using Raizen.Framework.Web.MVC.Extensions;
@using Raizen.UniCad.Model;

<style>
    .tab-pane {
        border-left: 1px solid silver;
        border-bottom: 1px solid silver;
        border-right: 1px solid silver;
        border-radius: 0px 0px 5px 5px;
        padding: 30px;
        margin-bottom: 20px;
    }

    .invisivel {
        display: none;
    }

    .invisivelLacre {
        display: none;
    }

    .invisivelComp {
        display: none !important;
    }

    .roxoRaizen {
        background-color: #6f376c !important;
    }

    .modalDrop {
        position: absolute;
        background: white;
        z-index: 9999;
        border: 1px solid black;
        padding: 30px;
        border-radius: 5px;
        display: none;
    }

    .modalDropQuestion {
        position: absolute;
        background: white;
        z-index: 9999;
        border: 1px solid black;
        padding: 5px;
        border-radius: 5px;
        display: none;
    }
</style>

@model Raizen.UniCad.Web.Models.ModelComposicao
@{

    var urlValidacao = @Url.Action("ValidarObjetos", "Composicao");

    var mensagemOperacao = Html.Raw((Model.Resultado == null || string.IsNullOrEmpty(Model.Resultado.Mensagem) ? @"""""" : @"""" + Model.Resultado.Mensagem + @""""));
    var dadosValidacoes = Html.Raw((Model.ValidacoesModelo.IsNullOrEmpty() ? @"""""" : Json.Encode(Model.ValidacoesModelo)));
    var contemErros = Html.Raw((string.IsNullOrEmpty(Model.ContemErrosModel) ? @"""N""" : @"""" + Model.ContemErrosModel + @""""));

}
<style>
    .btn.btn-custom[disabled] {
        background: silver;
        border-color: silver;
        opacity: 0.5;
    }
</style>
<script type="text/javascript" src="@Url.ResolverUrlComVersao("~/Content/js/Raizen/UniCad/Raizen.UniCad.Mensagens.js")"></script>
<script type="text/javascript" src="@Url.ResolverUrlComVersao("~/Content/js/Raizen/UniCad/Raizen.UniCad.Composicao.js")"></script>

<script type="text/javascript">
    $(document).ready(function () {

        raizenCoreJs.raizenCRUD.urlSalvar = '@Url.Action("Salvar", "Composicao")';
        raizenCoreJs.raizenCRUD.urlAprovar = '@Url.Action("Aprovar", "Composicao")';

        raizenCoreJs.raizenMensagens.MensagemOperacao = @mensagemOperacao;
        raizenCoreJs.raizenMensagens.ContemErros = @contemErros;
        raizenCoreJs.raizenMensagens.ValidacoesModel = @dadosValidacoes;
        //raizenCoreJs.raizenMensagens.ExibirMensagemOperacao();
        raizenCoreJs.raizenHelpers.urlValidacao = "@urlValidacao";
        
        RaizenCoreJs.prototype.Composicao.urlValidarAlteracoes = '@Url.Action("ValidarAlteracoes", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlListarDocumentos = '@Url.Action("ListarDocumentos", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlObterQuantidades = '@Url.Action("ObterDados", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlVerificarPlaca = '@Url.Action("VerificarPlaca", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlNovaPlaca = '@Url.Action("Novo", "Placa")';
        RaizenCoreJs.prototype.Composicao.urlEditarPlaca = '@Url.Action("Editar", "Placa")';
        RaizenCoreJs.prototype.Composicao.urlLista = '@Url.Action("Index", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlVerificarAlteracoes = '@Url.Action("VerificarAlteracoes", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlBuscarTransportadora = '@Url.Action("BuscarTransportadora", "Composicao")';
        RaizenCoreJs.prototype.Composicao.urlSalvar = '@Url.Action("Salvar", "Composicao")';

        RaizenCoreJs.prototype.Composicao.urlObterEixos = '@Url.Action("ObterEixos", "Composicao")';

        $(document).keydown(function (e) {
            if (e.wich == 39 || e.keyCode == 39) {
                $('.nav-tabs.complemento > .active').next('li').find('a').trigger('click');
            }

            if (e.wich == 37 || e.keyCode == 37) {
                $('.nav-tabs.complemento > .active').prev('li').find('a').trigger('click');
            }
        });


        function mudarMascara(valor) {
            try {
                $("#Placa_CPFCNPJ").unmask();
            } catch (e) { }

            var tamanho = valor.length;
            console.log(tamanho);
            if (tamanho == 11) {
                $("#Composicao_CPFCNPJArrendamento").val(valor.substring(0, 3) +
                    "." +
                    valor.substring(3, 6) +
                    "." +
                    valor.substring(6, 9) +
                    "-" +
                    valor.substring(9, 11));
            } else if (tamanho == 14) {
                $("#Composicao_CPFCNPJArrendamento").val(valor.substring(0, 2) +
                    "." +
                    valor.substring(2, 5) +
                    "." +
                    valor.substring(5, 8) +
                    "/" +
                    valor.substring(8, 12) +
                    "-" +
                    valor.substring(12, 14));
            }
        }

        
        if ($("#Composicao_CPFCNPJArrendamento").val() != undefined && $("#Composicao_CPFCNPJArrendamento").val() != "") {
            var valor = $('#Composicao_CPFCNPJArrendamento').val().replace(/[^A-Za-z0-9]/g, '');
            mudarMascara(valor);
        }

        function buscarTransportadoraArrendamento(valor) {
            if (valor.length > 10) {
                raizenCoreJs.raizenHelpers.AbrirLoading();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("BuscarTransportadora", "Composicao")',
                    data: { cnpj: $('#Composicao_CPFCNPJArrendamento').val(), frete: $('#Composicao_Operacao').val(), idEmpresa: $('#Composicao_IDEmpresa').val(), idPais: 1 },
                    success: function (retorno) {
                        $('#Composicao_RazaoSocialArrendamento').val(retorno);
                        raizenCoreJs.raizenHelpers.FecharLoading();
                    },
                    error: function (retorno) {
                        ShowMessage(retorno);
                        raizenCoreJs.raizenHelpers.FecharLoading();
                    }
                });
            }
            else{
                $('#Composicao_RazaoSocialArrendamento').val('');
            }
        };

        tipoChange = function tipoChange() {
            $('#btnAddPlaca1').show();
            $('#btnEditPlaca1').hide();
            $('#btnAddPlaca2').show();
            $('#btnEditPlaca2').hide();
            $('#btnAddPlaca3').show();
            $('#btnEditPlaca3').hide();
            $('#btnAddPlaca4').show();
            $('#btnEditPlaca4').hide();

            $("#Composicao_Placa1").val('');
            $("#Composicao_Placa2").val('');
            $("#Composicao_Placa3").val('');
            $("#Composicao_Placa4").val('');
            if ($("#Composicao_IDTipoComposicao").val() != "") {
                if ($("#Composicao_IDTipoComposicao").val() == 1) {
                    $("#lbl_Composicao_Placa1").text('Placa Truck');
                    $("#AddPlaca1").fadeIn();
                    $("#AddPlaca2").hide();
                    $("#AddPlaca3").hide();
                    $("#AddPlaca4").hide();
                }
                if ($("#Composicao_IDTipoComposicao").val() == 2) {
                    $("#lbl_Composicao_Placa1").text('Placa Cavalo');
                    $("#AddPlaca1").fadeIn();
                    $("#AddPlaca2").fadeIn();
                    $("#AddPlaca3").hide();
                    $("#AddPlaca4").hide();

                }
                if ($("#Composicao_IDTipoComposicao").val() == 3) {
                    $("#lbl_Composicao_Placa1").text('Placa Cavalo');
                    $("#AddPlaca1").fadeIn();
                    $("#AddPlaca2").fadeIn();
                    $("#AddPlaca3").fadeIn();
                    $("#lbl_Composicao_Placa3").text('Placa Carreta 2');
                    $("#AddPlaca4").hide();
                }
                if ($("#Composicao_IDTipoComposicao").val() == 4) {
                    $("#lbl_Composicao_Placa1").text('Placa Cavalo');
                    $("#AddPlaca1").fadeIn();
                    $("#AddPlaca2").fadeIn();
                    $("#lbl_Composicao_Placa3").text('Dolly');
                    $("#AddPlaca3").fadeIn();
                    $("#AddPlaca4").fadeIn();
                }
                
                $('#IDTipoComposicaoAnterior').val($("#Composicao_IDTipoComposicao").val());
            }
        };

        OperacaoChange = function OperacaoChange() {
            this.tipoChange();
            var valor = $('#Composicao_CPFCNPJArrendamento').val().replace(/[^A-Za-z0-9]/g, '');
            buscarTransportadoraArrendamento(valor);
        };

        $("#Composicao_CPFCNPJArrendamento").change(function() {
            var valor = $('#Composicao_CPFCNPJArrendamento').val().replace(/[^A-Za-z0-9]/g, '');
            mudarMascara(valor);
            buscarTransportadoraArrendamento(valor);
        });

    });

</script>
<input type="hidden" id="hdfpostou" value="false" />
<div class="box border raizen" id="containerEdicao">
    <div class="box-title">
        <h4><i class="fa fa-puzzle-piece"></i><span class="hidden-inline-mobile">Composição</span></h4>
    </div>
    <div class="box-body">
        <div class="row">
            <div class="col-md-12">
                <form id="frmEdicao" class="form-horizontal" autocomplete="off">
                    @if (Model != null)
                    {
                        @Html.HiddenFor(model => model.Composicao.CodigoSalesForce)
                        @Html.HiddenFor(model => model.Composicao.CodigoEasyQuery)
                        @Html.HiddenFor(model => model.Composicao.IDPlaca1)
                        @Html.HiddenFor(model => model.Composicao.IDPlaca2)
                        @Html.HiddenFor(model => model.Composicao.IDPlaca3)
                        @Html.HiddenFor(model => model.Composicao.IDPlaca4)
                        @Html.HiddenFor(model => model.Composicao.IDStatus)
                        @Html.HiddenFor(model => model.UsuarioPerfil)
                        @Html.HiddenFor(model => model.IdPais, new { @Value = 1 })
                        @Html.HiddenFor(model => model.Composicao.isUtilizaPlacaChave)
                        <input type="hidden" name="@Html.NameFor(model => model.Composicao.jaExiste)" value="@Model.Composicao.jaExiste.ToString()" />
                        @Html.HiddenFor(model => model.Aprovar)
                        @Html.HiddenFor(model => model.Reprovar)
                        if (!Model.Aprovar && Model.Composicao.IDStatus != (int)EnumStatusComposicao.Reprovado)
                        {
                            <input type="hidden" name="@Html.NameFor(model => model.Operacao)" value="Insert" />
                        }
                        else
                        {
                            <input type="hidden" name="@Html.NameFor(model => model.Operacao)" value="Editando" />
                        }
                        <input type="hidden" name="@Html.NameFor(model => model.ChavePrimaria)" id="@Html.NameFor(model => model.ChavePrimaria)" value="@Model.ChavePrimaria" />
                        @Html.HiddenFor(model => model.Composicao.ID)
                        @Html.HiddenFor(model => model.Composicao.IDComposicao)
                        @Html.HiddenFor(model => model.Composicao.LoginUsuario)
                        @Html.HiddenFor(model => model.isArrendamento)
                    }
                    <input type="hidden" id="placaAdicionar" />
                    <label style="visibility:hidden" id="lbl_Composicao">Composição</label>

                    <div id="Tabs" class="nav-tabs-custom" role="tabpanel" style="margin-top: 10px;">
                        <ul class="nav nav-tabs complemento">
                            <li class="active"><a href="#tabPlacas" data-toggle="tab">Dados da Composição</a></li>
                            @if (Model.Aprovar)
                            {
                                <li><a href="#tabVeiculo" data-toggle="tab">Complementos</a></li>
                            }
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tabPlacas">
                                <div class="row">
                                    @if (Model != null && Model.Composicao != null && (Model.Composicao.IDEmpresa == 0 || Model.Composicao.IDEmpresa == 3) && Model.Operacao != OperacoesCRUD.Editando)
                                    {
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.IDEmpresa, new SelectList(GenericDelegate.Listar<Empresa>(), "ID", "Nome"), "Linha de Negócio", new { onclick = "raizenCoreJs.Composicao.empresaChange(this)" }, new HtmlHelperOption() { colunas = "col-md-2" })
                                        <script>raizenCoreJs.Composicao.empresaChange(this);</script>
                                    }
                                    else
                                    {
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.IDEmpresa, new SelectList(GenericDelegate.Listar<Empresa>(), "ID", "Nome"), "Linha de Negócio", null, new HtmlHelperOption() { colunas = "col-md-2" }, true)
                                        @Html.HiddenFor(model => model.Composicao.IDEmpresa)
                                    }

                                    @if (Model != null && Model.Composicao != null && (string.IsNullOrEmpty(Model.Composicao.Operacao) || Model.Composicao.Operacao == "Ambos"))
                                    {
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.Operacao, new SelectList(GenericDelegate.CifOuFob(), "ID", "Nome"), "Operação", new { onchange = "OperacaoChange()", title = "Modalidade de Carregamento" }, new HtmlHelperOption() { colunas = "col-md-2" })
                                    }
                                    else
                                    {
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.Operacao, new SelectList(GenericDelegate.CifOuFob(), "ID", "Nome"), "Operação", new { title = "Modalidade de Carregamento" }, new HtmlHelperOption() { colunas = "col-md-2" }, true)
                                        @Html.HiddenFor(model => model.Composicao.Operacao)
                                    }

                                    @if (Model.Operacao != OperacoesCRUD.Editando)
                                    {
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.IDTipoComposicao, new SelectList(GenericDelegate.ListarComplex<TipoComposicao>(x => x.IdPais == (int)EnumPais.Brasil), "ID", "Nome"), "Tipo de Composição", new { onchange = "tipoChange(this)" }, new HtmlHelperOption() { colunas = "col-md-2" })
                                    }
                                    else
                                    {
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.IDTipoComposicao, new SelectList(GenericDelegate.Listar<TipoComposicao>(), "ID", "Nome"), "Tipo de Composição", new { onchange = "tipoChange(this)" }, new HtmlHelperOption() { colunas = "col-md-2" }, true)
                                        @Html.HiddenFor(model => model.Composicao.IDTipoComposicao)

                                    }
                                    @Html.Hidden("IDTipoComposicaoAnterior", 0)

                                    @{var visivel = "display:none";}
                                    @if (Model != null && Model.Composicao != null && !string.IsNullOrEmpty(Model.Composicao.Placa1) || Model.Composicao.IDTipoComposicao > 0)
                                    {
                                        visivel = "";
                                    }
                                    else
                                    {
                                        visivel = "display:none";
                                    }

                                    <div class="form-group  col-md-3" id="AddPlaca1" style="@visivel">

                                        @Html.HiddenFor(model => model.Composicao.PlacaOficial1)
                                        @if ((Model.Composicao.IDTipoComposicao == (int)EnumTipoComposicao.Truck))
                                        {
                                            if (Model.Operacao == OperacoesCRUD.Editando && (Model.Composicao.IDEmpresa == (int)EnumEmpresa.EAB || Model.Composicao.IDEmpresa == (int)EnumEmpresa.Ambos))
                                            {
                                                @Html.BootstrapTextBoxFor(model => model.Composicao.Placa1, null, "Placa Truck", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.placaChange(this, 1);", style = "text-transform:uppercase" }, new HtmlHelperOption() { colunas = "col-md-9" }, true)
                                                @Html.HiddenFor(model => model.Composicao.Placa1)
                                            }
                                            else
                                            {
                                                @Html.BootstrapTextBoxFor(model => model.Composicao.Placa1, null, "Placa Truck", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.placaChange(this, 1);", style = "text-transform:uppercase;" }, new HtmlHelperOption() { colunas = "col-xs-9" })
                                            }
                                            if (Model.Operacao == OperacoesCRUD.Insert)
                                            {
                                                @Html.BootstrapButtonAdd("btnAddPlaca1", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.novaPlaca(1, 1)", "style='margin-top:24px;margin-left:-12px; " + @visivel + "'")
                                            }
                                        }
                                        else
                                        {
                                            if (Model.Operacao == OperacoesCRUD.Editando && (Model.Composicao.IDEmpresa == (int)EnumEmpresa.EAB || Model.Composicao.IDEmpresa == (int)EnumEmpresa.Ambos))
                                            {
                                                @Html.BootstrapTextBoxFor(model => model.Composicao.Placa1, null, "Placa Cavalo", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.placaChange(this, 1);", style = "text-transform:uppercase" }, new HtmlHelperOption() { colunas = "col-md-9" }, true)
                                                @Html.HiddenFor(model => model.Composicao.Placa1)
                                            }
                                            else
                                            {
                                                @Html.BootstrapTextBoxFor(model => model.Composicao.Placa1, null, "Placa Cavalo", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.placaChange(this, 1);", style = "text-transform:uppercase" }, new HtmlHelperOption() { colunas = "col-md-9" })
                                                visivel = "";
                                                if (Model.Composicao.IDPlaca1.HasValue)
                                                {
                                                    visivel = "display:none";
                                                }
                                                @Html.BootstrapButtonAdd("btnAddPlaca1", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.novaPlaca(1, 1)", "style='margin-top:24px;margin-left:-12px; " + @visivel + "'")
                                            }
                                        }

                                        @{ visivel = ""; }
                                        @if (!Model.Composicao.IDPlaca1.HasValue)
                                        {
                                            visivel = "display:none";
                                        }

                                        @Html.BootstrapButtonEdit("btnEditPlaca1", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.EditarPlaca(1,'" + Model.Aprovar + "')", "style='margin-top: 24px;margin-left:-12px; " + @visivel + "', title='Edição de Placa'")
                                        @{
                                            if (Model.Aprovar && Model.Composicao.IDPlaca1.HasValue)
                                            {
                                                if (Model.Composicao.isPlaca1Pendente || Model.Composicao.isPlaca1Alterada)
                                                {
                                                    <span class="fa fa-exclamation" style="color:#ff0000"></span>
                                                }
                                                else
                                                {
                                                    <span class="fa fa-check" style="color:#36940d"></span>
                                                }
                                            }
                                        }
                                    </div>
                                    @if (Model != null && Model.Composicao != null && !string.IsNullOrEmpty(Model.Composicao.Placa2) || Model.Composicao.IDTipoComposicao > 1)
                                    {
                                        visivel = "";
                                    }
                                    else
                                    {
                                        visivel = "display:none";
                                    }
                                </div>

                                <div class="row">
                                    <div class="form-group col-md-3" id="AddPlaca2" style="@visivel">
                                        @Html.HiddenFor(model => model.Composicao.PlacaOficial2)
                                        @if (Model.Operacao == OperacoesCRUD.Editando && (Model.Composicao.IDEmpresa == (int)EnumEmpresa.Combustiveis || Model.Composicao.IDEmpresa == (int)EnumEmpresa.Ambos))
                                        {
                                            @Html.BootstrapTextBoxFor(model => model.Composicao.Placa2, null, "Placa Carreta 1", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.checarPlacaRepetida(this,false);raizenCoreJs.Composicao.placaChange(this, 2);", style = "text-transform:uppercase;", title = "Não é permitido a Edição" }, new HtmlHelperOption() { colunas = "col-xs-9" }, true)
                                            @Html.HiddenFor(model => model.Composicao.Placa2)
                                        }
                                        else
                                        {
                                            @Html.BootstrapTextBoxFor(model => model.Composicao.Placa2, null, "Placa Carreta 1", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.checarPlacaRepetida(this,false);raizenCoreJs.Composicao.placaChange(this, 2);", style = "text-transform:uppercase; " }, new HtmlHelperOption() { colunas = "col-xs-9" })
                                            visivel = "";
                                            if (Model.Composicao.IDPlaca2.HasValue)
                                            {
                                                visivel = "display:none";
                                            }
                                            @Html.BootstrapButtonAdd("btnAddPlaca2", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.novaPlaca(2, 1)", "style='margin-top:24px;margin-left:-12px; " + @visivel + "'")
                                        }
                                        @{visivel = ""; }
                                        @if (!Model.Composicao.IDPlaca2.HasValue)
                                        {
                                            visivel = "display:none";
                                        }
                                        @Html.BootstrapButtonEdit("btnEditPlaca2", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.EditarPlaca(2,'" + Model.Aprovar + "')", "style='margin-top: 24px;margin-left:-12px; " + @visivel + "', title='Edição de Placa'")
                                        @{if (Model.Aprovar && Model.Composicao.IDPlaca2.HasValue)
                                            {
                                                if (Model.Composicao.isPlaca2Pendente || Model.Composicao.isPlaca2Alterada)
                                                {
                                                    <span class="fa fa-exclamation" style="color:#ff0000"></span>
                                                }
                                                else
                                                {
                                                    <span class="fa fa-check" style="color:#36940d"></span>
                                                }
                                            }
                                        }

                                    </div>

                                    @{ var texto = "Placa Carreta 2";}
                                    @if (Model != null && Model.Composicao != null && !string.IsNullOrEmpty(Model.Composicao.Placa3) || Model.Composicao.IDTipoComposicao > 2)
                                    {
                                        visivel = "";


                                        if (Model.Composicao.IDTipoComposicao > 3)
                                        {
                                            texto = "Dolly";
                                        }
                                    }
                                    else
                                    {
                                        visivel = "display:none";
                                    }

                                    <div class="form-group col-md-3" id="AddPlaca3" style="@visivel">

                                        @Html.BootstrapTextBoxFor(model => model.Composicao.Placa3, null, texto, new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.checarPlacaRepetida(this,false);raizenCoreJs.Composicao.placaChange(this, 3);", style = "text-transform:uppercase; " }, new HtmlHelperOption() { colunas = "col-md-9" })
                                        @Html.HiddenFor(model => model.Composicao.PlacaOficial3)
                                        @{ visivel = ""; }
                                        @if (Model.Composicao.IDPlaca3.HasValue)
                                        {
                                            visivel = "display:none";
                                        }
                                        @Html.BootstrapButtonAdd("btnAddPlaca3", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.novaPlaca(3, 1)", "style='margin-top:24px;margin-left:-12px; " + @visivel + "'")
                                        @{ visivel = ""; }
                                        @if (!Model.Composicao.IDPlaca3.HasValue)
                                        {
                                            visivel = "display:none";
                                        }
                                        @Html.BootstrapButtonEdit("btnEditPlaca3", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.EditarPlaca(3,'" + Model.Aprovar + "')", "style='margin-top: 24px;margin-left:-12px; " + @visivel + "', title='Edição de Placa'")
                                        @{
                                            if (Model.Aprovar && Model.Composicao.IDPlaca3.HasValue)
                                            {
                                                if (Model.Composicao.isPlaca3Pendente || Model.Composicao.isPlaca3Alterada)
                                                {
                                                    <span class="fa fa-exclamation" style="color:#ff0000"></span>
                                                }
                                                else
                                                {
                                                    <span class="fa fa-check" style="color:#36940d"></span>
                                                }
                                            }
                                        }
                                    </div>

                                    @if (Model != null && Model.Composicao != null && !string.IsNullOrEmpty(Model.Composicao.Placa4) || Model.Composicao.IDTipoComposicao > 3)
                                    {
                                        visivel = "";
                                    }
                                    else
                                    {
                                        visivel = "display:none";
                                    }
                                    <div class="form-group col-md-3" id="AddPlaca4" style="@visivel">

                                        @Html.BootstrapTextBoxFor(model => model.Composicao.Placa4, null, "Placa Carreta 2", new { maxlength = "7", onkeyup = "raizenCoreJs.Composicao.checarPlacaRepetida(this,false);raizenCoreJs.Composicao.placaChange(this, 4);", style = "text-transform:uppercase" }, new HtmlHelperOption() { colunas = "col-xs-9" })
                                        @Html.HiddenFor(model => model.Composicao.PlacaOficial4)
                                        @{ visivel = "";}
                                        @if (Model.Composicao.IDPlaca4.HasValue)
                                        {
                                            visivel = "display:none";
                                        }
                                        @Html.BootstrapButtonAdd("btnAddPlaca4", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.novaPlaca(4, 1)", "style='margin-top:24px; margin-left:-12px; " + @visivel + "'")
                                        @{ visivel = "";}
                                        @if (!Model.Composicao.IDPlaca4.HasValue)
                                        {
                                            visivel = "display:none";
                                        }
                                        @Html.BootstrapButtonEdit("btnEditPlaca4", null, ButtonType.BUTTON, "raizenCoreJs.Composicao.EditarPlaca(4,'" + Model.Aprovar + "')", "style='margin-top: 24px;margin-left:-12px; " + @visivel + "', title='Edição de Placa'")
                                        @{if (Model.Aprovar && Model.Composicao.IDPlaca4.HasValue)
                                            {
                                                if (Model.Composicao.isPlaca4Pendente || Model.Composicao.isPlaca4Alterada)
                                                {
                                                    <span class="fa fa-exclamation" style="color:#ff0000"></span>
                                                }
                                                else
                                                {
                                                    <span class="fa fa-check" style="color:#36940d"></span>
                                                }
                                            }
                                        }
                                    </div>

                                    <div class="form-group col-md-3">
                                        @Html.BootstrapDropDownListFor(model => model.Composicao.IDCategoriaVeiculo, new SelectList(CategoriaVeiculoDelegate.Listar(), "ID", "Nome"), "Categoria do Veículo", new { title = "Não é permitido a Edição" }, new HtmlHelperOption() { colunas = "col-md-10" }, true)
                                        @Html.HiddenFor(model => model.Composicao.IDCategoriaVeiculo, new { @class = "IDCategoriaVeiculo" })
                                    </div>
                                    @{if (Model.Aprovar)
                                        {
                                            @Html.BootstrapTextAreaFor(model => model.Composicao.Justificativa, "Justificativa", new { maxlength = 1000, @rows = "2" }, new HtmlHelperOption() { colunas = "col-md-10" });
                                        }
                                        else
                                        {
                                            @Html.BootstrapTextAreaFor(model => model.Composicao.Justificativa, "Justificativa", new { maxlength = 1000, @rows = "2" }, new HtmlHelperOption() { colunas = "col-md-10" }, true);
                                            @Html.HiddenFor(model => model.Composicao.Justificativa)
                                        }
                                    }
                                    <div class="col-md-12">
                                        <div class="box border raizen">
                                            <div class="box-title">
                                                <h4><i class="fa fa-truck"></i><span class="hidden-inline-mobile">Arrendamento</span></h4>
                                            </div>
                                            <div class="box-body">
                                                <div class="row">
                                                    @Html.BootstrapDropDownList("Arrendamento", new SelectList(GenericDelegate.VerdadeiroOuFalso(), "Flag", "Nome"), "Arrendamento", null, new HtmlHelperOption() { colunas = "col-md-2", mostraTextoVazio = true })
                                                    @Html.BootstrapTextBoxFor(model => model.Composicao.CPFCNPJArrendamento, null, "CPF/CNPJ do Arrendamento", new { maxlength = 20, title = "Digite o CNPJ ou CPF que está na CRLV do Veículo" }, new HtmlHelperOption() { colunas = "col-md-3" }, false)
                                                    @Html.BootstrapTextBoxFor(model => model.Composicao.RazaoSocialArrendamento, null, "Nome/Razão Social", new { maxlength = 400, title = "Digite a Nome/Razão Social do CPF/CNPJ do Arrendamento" }, new HtmlHelperOption() { colunas = "col-md-5" }, false)
                                                </div>
                                                <br />
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <p>
                                                            <b>Arrendamento: </b>Caso o transporte seja realizado por terceiro, é OBRIGATÓRIO anexar um Contrato entre as partes (CRLV e Terceiro).<br />
                                                            Neste caso, selecione a opção <b>SIM</b> logo acima, preenchendo os dados do terceiro que sairão na Nota Fiscal. Caso contrário, selecione a opção <b>NÃO</b>.<br />
                                                            Contratos aceitos: Arrendamento, Aluguel, Comodato, Subcontratação ou Prestação de Serviços.
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane" id="tabVeiculo">
                                <div class="row">
                                    <div class="box border raizen">
                                        <div class="box-title">
                                            <h4><i class="fa fa-truck"></i><span class="hidden-inline-mobile">Transportador</span></h4>
                                        </div>
                                        <div class="box-body">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="col-md-3">
                                                        <label class="control-label" for="Composicao_CPFCNPJ" id="lbl_Composicao_CPFCNPJ">CPF/CNPJ</label>
                                                        <input type="text" class="form-control" id="Composicao_CPFCNPJ" name="@Html.NameFor(model => model.Composicao.CPFCNPJ)" value="@((Model != null && Model.Composicao != null) ? Model.Composicao.CPFCNPJ : string.Empty)" readonly />
                                                    </div>
                                                    @{var exibirRazao = "";}
                                                    @if (Model != null && Model.Composicao != null && Model.Composicao.CPFCNPJ != null && Model.Composicao.CPFCNPJ.Length <= 11)
                                                    {
                                                        exibirRazao = "display:none";
                                                    }
                                                    <div id="razaoSocial" style="@exibirRazao">
                                                        @Html.BootstrapTextBoxFor(model => model.Composicao.RazaoSocial, null, "Razão Social", new { maxlength = 400, @readonly = "readonly" }, new HtmlHelperOption() { colunas = "col-md-2" })
                                                    </div>
                                                    @{var exibirData = "";}
                                                    @if (Model != null && Model.Composicao != null && Model.Composicao.CPFCNPJ != null && Model.Composicao.CPFCNPJ.Length > 11)
                                                    {
                                                        exibirData = "display:none";
                                                    }
                                                    <div id="dataNascimento" style="@exibirData">
                                                        @Html.BootstrapDateBoxFor(model => model.Composicao.DataNascimento, "Data de Nascimento", new { @readonly = "readonly" }, new HtmlHelperOption() { colunas = "col-md-2" })
                                                    </div>
                                                    @Html.BootstrapDropDownListFor(model => model.Composicao.ufCRLV, new SelectList(GenericDelegate.Listar<Estado>(), "ID", "Nome"), "Estado", new { @disabled = "disabled" }, new HtmlHelperOption() { colunas = "col-md-2" })
                                                    @Html.HiddenFor(model => model.Composicao.ufCRLV)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    @Html.BootstrapCurrencyBoxFor(model => model.Composicao.TaraComposicao, "Tara Composição", null, new HtmlHelperOption() { colunas = "col-md-2", hideIcone = true }, desabilitado: true)
                                    @Html.BootstrapTextBoxFor(model => model.Composicao.EixosComposicao, null, "Nº Eixos Composição", null, new HtmlHelperOption() { colunas = "col-md-2" }, true)
                                    @Html.BootstrapTextBoxFor(model => model.Composicao.EixosPneusDuplos, null, "Nº Pneus Duplos", null, new HtmlHelperOption() { colunas = "col-md-2" }, true)
                                    @Html.BootstrapTextBoxFor(model => model.Composicao.EixosDistanciados, null, "Eixos distanciados", null, new HtmlHelperOption() { colunas = "col-md-2" }, true)
                                    @Html.BootstrapCurrencyBoxFor(model => model.Composicao.PBTC, "PBTC (t)", new { maxlength = 18, min = 0 }, new HtmlHelperOption() { colunas = "col-md-2", hideIcone = true })
                                    @Html.HiddenFor(model => model.Composicao.TaraComposicao)
                                    @Html.HiddenFor(model => model.Composicao.EixosComposicao)
                                    @Html.HiddenFor(model => model.Composicao.EixosPneusDuplos)
                                    @Html.HiddenFor(model => model.Composicao.EixosDistanciados)
                                    @Html.HiddenFor(model => model.Composicao.ufCRLV)
                                </div>
                                <div id="documentosComposicao" class="row">
                                    @if (Model != null && Model.Composicao != null && Model.Composicao.Documentos != null)
                                    {
                                        Html.RenderPartial("~/Views/Composicao/_Documentos.cshtml", Model.Composicao.Documentos);
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="modalcontainerEdicao" tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="myModalLabel"
                         aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content" style="">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                        &times;
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <div id="ModalPlaca">
                                    </div>
                                    <div class="row" style="text-align:center">
                                        <div class="col-md-12">
                                            <button class="btn btn-custom" id="btnCrudSalvar" type="button" tabindex="1" onclick="raizenCoreJs.Placa.Salvar(1)">
                                                <i class="fa fa-save"></i> Salvar
                                            </button>
                                            <button class="btn btn-custom voltar" type="button" tabindex="2" onclick="$('#modalcontainerEdicao').modal('hide');">
                                                <i class="fa fa-long-arrow-left"></i> Cancelar
                                            </button>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    <div class="row" style="text-align:center">
                        <div class="col-md-12" id="composicaoSalvar">
                            @{if (Model.Aprovar)
                                {
                                    <button class="btn btn-custom" id="btnCrudSalvar" type="button" tabindex="1" onclick="raizenCoreJs.Composicao.Salvar(2,false)">
                                        <i class="fa fa-save"></i> Aprovar
                                    </button>
                                    <button class="btn btn-custom" id="btnCrudSalvar" type="button" tabindex="1" onclick="raizenCoreJs.Composicao.Salvar(2,true)">
                                        <i class="fa fa-save"></i> Aprovar com Ressalvas
                                    </button>
                                    <button class="btn btn-custom" id="btnCrudSalvar" type="button" tabindex="1" onclick="raizenCoreJs.Composicao.Reprovar()">
                                        <i class="fa fa-save"></i> Reprovar
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-custom" id="btnCrudSalvar" type="button" tabindex="1" onclick="raizenCoreJs.Composicao.SalvarComposicao(1,false, 1)">
                                        <i class="fa fa-save"></i> Enviar para aprovação
                                    </button>
                                }
                            }

                            <button class="btn btn-custom voltar" type="button" tabindex="2" onclick="window.location = '@Url.Action("Index","Composicao")'">
                                <i class="fa fa-long-arrow-left"></i> Voltar
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@{Html.RenderPartial("_Confirm", new Raizen.Framework.Web.MVC.Models.ModalConfirm() { MessageConfirm = "Deseja realmente reprovar essa composição?", MessageYes = "Sim", MessageNot = "Não" });}
@{Html.RenderPartial("_ConfirmEnviar", new Raizen.Framework.Web.MVC.Models.ModalConfirm() { MessageConfirm = "Deseja enviar novamente para aprovação?", MessageYes = "Enviar", MessageNot = "Cancelar" });}

<style>
    .modal-dialog {
        max-width: 632px;
        margin: 30px auto;
    }
</style>
